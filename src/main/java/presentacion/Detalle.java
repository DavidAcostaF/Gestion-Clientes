/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion;

import dominio.Cliente;
import javax.swing.JOptionPane;
import negocio.ClienteDTO;
import negocio.ClientesBO;

/**
 * La clase Detalle proporciona una interfaz gráfica para visualizar, 
 * actualizar o eliminar la información de un cliente en el sistema.
 * 
 * Esta ventana extiende JFrame y recibe un objeto ClienteDTO
 * representando al cliente que se quiere visualizar o modificar. Permite actualizar 
 * los datos del cliente o eliminarlo del sistema.
 * 
 * @author af_da
 */
public class Detalle extends javax.swing.JFrame {

    private ClienteDTO clienteOriginal;
    private ClientesBO clientesBO;

    /**
     * Crea una nueva ventana Detalle para un cliente específico.
     * 
     * Inicializa los componentes gráficos y recibe un ClienteDTO
     * representando al cliente cuyos detalles se desean mostrar o modificar.
     * 
     * @param clienteOriginal el cliente cuyos detalles serán mostrados en la interfaz.
     */
    public Detalle(ClienteDTO clienteOriginal) {
        initComponents();
        this.clienteOriginal = clienteOriginal;
        clientesBO = ClientesBO.getInstance();
        txtID.setText(clienteOriginal.getID());
        txtNombre.setText(clienteOriginal.getNombre());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        btnVolver = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        bntActualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Detalle cliente");

        jLabel1.setText("ID:");

        jLabel2.setText("Nombre:");

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        bntActualizar.setText("Actualizar");
        bntActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bntActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtID, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                            .addComponent(txtNombre)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btnVolver)
                        .addGap(81, 81, 81)
                        .addComponent(btnEliminar)
                        .addGap(65, 65, 65)
                        .addComponent(bntActualizar)))
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVolver)
                    .addComponent(btnEliminar)
                    .addComponent(bntActualizar))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Acción que se ejecuta al presionar el botón "Actualizar".
     * 
     * Verifica si los campos de texto son válidos y, en caso afirmativo, 
     * actualiza la información del cliente en el sistema a través de ClientesBO.
     * 
     * @param evt el evento de acción generado al presionar el botón.
     */
    private void bntActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bntActualizarActionPerformed
        if (validarCampos(txtID.getText(), txtNombre.getText())){
        clientesBO.actualizarCliente(clienteOriginal, new ClienteDTO(txtID.getText(), txtNombre.getText()));
        Inicio inicio = new Inicio();
        inicio.setVisible(true);
        this.dispose();
        }
    }//GEN-LAST:event_bntActualizarActionPerformed

    /**
     * Acción que se ejecuta al presionar el botón "Eliminar".
     * 
     * Solicita confirmación para eliminar al cliente, y si el usuario 
     * acepta, elimina el cliente utilizando ClientesBO y regresa a 
     * la ventana principal Inicio.
     * 
     * @param evt el evento de acción generado al presionar el botón.
     */
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int option = JOptionPane.showConfirmDialog(this, "Seguro que desea eliminar al cliente?");
        if (option == JOptionPane.YES_OPTION) {
            clientesBO.eliminarCliente(new ClienteDTO(txtID.getText(), txtNombre.getText()));
            Inicio inicio = new Inicio();
            inicio.setVisible(true);
            this.dispose();
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    /**
     * Acción que se ejecuta al presionar el botón "Volver".
     * 
     * Regresa a la ventana principal Inicio sin realizar cambios.
     * 
     * @param evt el evento de acción generado al presionar el botón.
     */
    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        Inicio inicio = new Inicio();
        inicio.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    /**
     * Valida los campos del formulario.
     * 
     * Verifica que los campos de ID y nombre no estén vacíos, que el ID 
     * tenga el formato correcto (debe comenzar con "CL" seguido de números), 
     * y que el ID no esté ya registrado en el sistema a menos que sea el 
     * cliente original.
     * 
     * @param id el ID del cliente ingresado
     * @param nombre el nombre del cliente ingresado
     * @return true si los campos son válidos, false de lo contrario
     */
    private boolean validarCampos(String id, String nombre) {
        if (id.isBlank() && nombre.isBlank()) {
            JOptionPane.showMessageDialog(this, "El id y nombre no pueden estar vacios", "Revisar información", JOptionPane.INFORMATION_MESSAGE);
            return false;
        } else {
            if (!id.matches("CL\\d+")) {
                JOptionPane.showMessageDialog(this, "El id debe tener un formato 'CL1' donde el numero puede cambiar", "información", JOptionPane.INFORMATION_MESSAGE);
                return false;
            } else {
                if (!clienteOriginal.getID().equalsIgnoreCase(id)) {
                    ClienteDTO cliente = clientesBO.encontrarClienteID(id);
                    if (cliente != null) {
                        JOptionPane.showMessageDialog(this, "El id ya se encuentra registrado", "información", JOptionPane.INFORMATION_MESSAGE);
                        return false;
                    }
                }

            }
        }

        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bntActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
